extends ../components/_header.pug
block content
  div(class="container__nav")
    include ../components/_nav.pug
    include ../views/menu.pug
  div#main__container
    main.main
      .post__content
        h3 Mini Retos para Intentar
        p 
          | Cambiar de área de conocimiento no siempre es sencillo,
          | salir de la zona de confort no resulta un paso fácil. 
          | Este es mi caso, soy arquitecto de profesión, 
          | pero con ganas de trabajar en tecnología.
        p 
          | Cuando das tus primeros pasos en programación puede ser abrumador,
          | Backend, Frontend, Base de Datos, PHP, JavaScript,
          | Dockers, DevOps y otros términos que parecerían imposibles de entender.
          | Tranquilo solo respira y sigue leyendo.
        p  
          | Decidir que aprender de primero puede ser una decisión difícil,
          | en mi caso decidí aprender sobre desarrollo web y en paralelo ir tomando cursos y
          | clases sobre fundamentos de programación, necesario cuando solo conoces lo básico de computadoras.
        p Esta decisión se basa en la cercanía que tengo con el diseño, un área que se me hace más familiar , esto me llevo a aprender lenguajes como HTML y CSS para pintar en el navegador y poder visualizar lo que voy creando, sin embargo, esto no es suficiente para realizar funcionalidades con las que interactuamos en nuestras aplicaciones favoritas, así que era necesario aprender JavaScript(JS), un lenguaje de programación que te permite interactuar con el navegador, el cliente y poder darle más dinamismo a tus aplicaciones web.
        p Claro, aprender JavaScript puede ser una tarea larga y un poco frustrante, así que luego de varios cursos, mucha practica y más errores, decidí realizar ciertos retos que permitan poner en práctica los conocimientos que he ido adquiriendo. Y es esto lo que te quiero compartir.
        p Mi intención es ir poniendo en práctica HTML, CSS y JS a través de pequeñas aplicaciones, porque conozco lo frustrante que puede ser querer realizar una aplicación compleja. Entonces apliquemos “Divide y vencerás”, con pequeñas piedras se construyen grandes caminos.
        p Haremos esto juntos, con cada reto aprenderemos nuevas cosas, que pueden parecer pequeñas pero con la combinación de todas puedes hacer el siguiente Google, bueno espera un poco, primero aprendamos a hacer una calculadora.
        h2 El primer reto será realizar un DropDown.
        p Aquí el resultado final:
        img(src=require("../../src/assets/images/makesimple.gif").default, alt="dropdown")
        p Me gustaría aclarar que no soy experto, compartiré mi forma de hacerlo, seguro existen formas más optimas, si me las muestras seria genial.
        p Ahora el Código HTML:
        img(src=require('../../src/assets/images/html.svg').default, alt="html-code")
        p Como verán, es un HTML sencillo, donde tengo un contenedor, y dentro de este se encuentra el menú.
        p Aquí lo que hice fue hacer un contenedor, el cual tendría dos DIV, uno que contiene el botón para desplegar el menú y el otro el menú a desplegar. Con esto logramos manejar todo desde el contenedor del DropMenu y el Settings, y hacer un poco más legible el código.
        img(src=require('../../src/assets/images/ccs1.svg').default, alt="css1-code")
        p En el CSS para hacer que el menú este por default oculto uso una Opacity = 0 y aparte creo otra clase con Opacity = 1 , que será agregada de manera dinámica en JS, estas mismas clases contiene la parte de transiciones, para hacer más elegante el despliegue.
        img(src=require('../../src/assets/images/css2.svg').default, alt="css2-code")
        p Ya luego de tener el HTML y CSS, usamos JS para darle dinamismo.
        img(src=require('../../src/assets/images/js.svg').default, alt="js-code")
        p El código en JS es muy sencillo, usamos las constantes, BUTTON para el botón del menú, DROPMENU que será el menú a desplegar y ARROW que girara el indicador cuando el menu esta desplegado y cuando no.
        p Ya con esto realizamos una simple función, donde a los elementos HTML anteriormente mencionados, le agregamos o quitamos las clases auxiliares que creamos en el CSS.
        p Aquí usamos una propiedad de JS que es Element.classList.toggle, que nos permite revisar si una clase esta aplicada a nuestro elemento e intercambiar entre estas.
        p En nuestro caso, agregamos las clases Show__menu y After, las cuales desplegarán el menú, y rotarán nuestra flecha.
        img(src=require('../../src/assets/images/css3.svg').default, alt="css3-code")
        p Por otro lado, uso una función de JS preventDefault(), para eliminar la recarga al hacer clic sobre el botón de Settings, y así seguir con el flujo del programa.
        p Ojalá este mini tutorial sea de tu agrado, y puedas comentar otras maneras de realizar lo mismo, o como incluso mejoraría el código.
        p Puedes revisar el código completo en el repositorio de GitHub: <a href='https://github.com/KrlosAren/Make-Simple/tree/master/00_Settings' target='_blank'>https://github.com/KrlosAren/Make-Simple/tree/master/00_Settings</a>
    include ../components/_footer.pug